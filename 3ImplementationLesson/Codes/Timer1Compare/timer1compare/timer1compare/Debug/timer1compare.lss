
timer1compare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a9  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  000008ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000274  00000000  00000000  00000f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000396  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001576  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000015d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile int toggle = 0;

int main(void)
{
	/*Initializing the Timer1 in the compare mode*/
	TIMSK1 |= (1<<OCIE1A); // compare interrupt enabled, only the OCIE1A pin of the TIMSK1 will be changed
  90:	ef e6       	ldi	r30, 0x6F	; 111
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	82 60       	ori	r24, 0x02	; 2
  98:	80 83       	st	Z, r24
	/*Even in the compare mode there are many modes of Operation we will use the
	CTC mode. CTC => Clear Timer On Compare Match. To enter this mode we have to 
	set the values of TCCR1B and TCCR1A to the proper values*/
	
	//Setting TCCR1B
	TCCR1B |= (1<<WGM12); //assignment of 1 to WGM12
  9a:	e1 e8       	ldi	r30, 0x81	; 129
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13); //assignment of 0 to WGM13
  a4:	80 81       	ld	r24, Z
  a6:	8f 7e       	andi	r24, 0xEF	; 239
  a8:	80 83       	st	Z, r24
	
	//Setting TCCR1A
	TCCR1A &= ~((1<<WGM10)|(1<<WGM11));// assignment of 0 to both WGM10 and WGM11
  aa:	a0 e8       	ldi	r26, 0x80	; 128
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	8c 91       	ld	r24, X
  b0:	8c 7f       	andi	r24, 0xFC	; 252
  b2:	8c 93       	st	X, r24
	 
	/*Now we need to set the pre-scaler value so that Timer Overflow interrupt duration
	(The time taken for the timer register to reach its maximum value and overflow)
	would be in an appropriate value(not too fast)*/
	//setting up the Pre-scaler here also we have to make changes to TCCR1B
	TCCR1B |= (1<<CS12);
  b4:	80 81       	ld	r24, Z
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	80 83       	st	Z, r24
	TCCR1B &= ~((1<<CS11)|(1<<CS10)) ;
  ba:	80 81       	ld	r24, Z
  bc:	8c 7f       	andi	r24, 0xFC	; 252
  be:	80 83       	st	Z, r24
	 thats 16bits or setting the MSB of timer register and the LSB of timer register
	 that also instead of setting it up in binary we could do that quite shortly using
	 hexadecimal as follows. */
	
	//Setting the timer Register to zero by setting the MSB 8 bits and LSB 8 bits
	TCNT1H = 0x00;
  c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	TCNT1L = 0x00;
  c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	second. This value is the number of pulses that would occur after the passing of
	1 second. we can calculate this, and it turns out the it would take 62500 pulse
	for 1 second to pass, given that we are using timer1 and the pre-scaler 256*/
	
	//setting the timer compare register to 62500 (F424 in hex)
	OCR1AH = 0xF4;
  c8:	84 ef       	ldi	r24, 0xF4	; 244
  ca:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = 0x24;
  ce:	84 e2       	ldi	r24, 0x24	; 36
  d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	/*Very important !!!!!
	enable global interrupts or interrupts wont work at all*/
	
	sei(); //Global Interrupt 
  d4:	78 94       	sei
	
	
	//DDRB |=(1<<PORTB5); // would this work?
	DDRB |=(1<<PB5); // setting portB pin no 5 as output port
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	80 62       	ori	r24, 0x20	; 32
  da:	84 b9       	out	0x04, r24	; 4
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x4c>

000000de <__vector_11>:
    }
}

//defining the timer interrupt service routine thing
ISR(TIMER1_COMPA_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	if (toggle)
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f8:	89 2b       	or	r24, r25
  fa:	21 f0       	breq	.+8      	; 0x104 <__vector_11+0x26>
	{
		PORTB |= (1<<PB5);
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	85 b9       	out	0x05, r24	; 5
 102:	03 c0       	rjmp	.+6      	; 0x10a <__vector_11+0x2c>
	} 
	else
	{
		PORTB &= ~(1<<PB5);
 104:	85 b1       	in	r24, 0x05	; 5
 106:	8f 7d       	andi	r24, 0xDF	; 223
 108:	85 b9       	out	0x05, r24	; 5
	}
	toggle = 1 - toggle;
 10a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	82 1b       	sub	r24, r18
 118:	93 0b       	sbc	r25, r19
 11a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		

 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	3f 91       	pop	r19
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
