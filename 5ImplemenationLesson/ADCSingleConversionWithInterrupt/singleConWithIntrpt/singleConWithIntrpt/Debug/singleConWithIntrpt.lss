
singleConWithIntrpt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000780  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b8  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033b  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000013a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000405  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ab  00000000  00000000  0000180d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <configADC>:
    }
}

void configADC(void){
	//AREF, External
	ADMUX &= ~((1<<REFS1)|(1<<REFS0));
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	8f 73       	andi	r24, 0x3F	; 63
  88:	80 83       	st	Z, r24
	//following is a better way to select the analog input pin
	/*(ADMUX & 0xF0) returns the binary value such that the last four bits of ADMUX are zero and the rest of the bits
	are exactly as they are (because 0 AND X = 0, 1 AND X = X). then this return value undergoes bit wise OR with
	the binary form of the CHANNEL constant then MUX 0 1 2 3 are set up properly (because MUX3:0 will be 5 for ADC5,
	0 for ADC0,etc)*/
	ADMUX = (ADMUX & 0xF0)| CHANNEL;
  8a:	80 81       	ld	r24, Z
  8c:	80 7f       	andi	r24, 0xF0	; 240
  8e:	85 60       	ori	r24, 0x05	; 5
  90:	80 83       	st	Z, r24
	
	// enabling analog to digital convertion
	ADCSRA |= (1<<ADEN);
  92:	ea e7       	ldi	r30, 0x7A	; 122
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	80 83       	st	Z, r24
	//setting the pre-scaler value to 128
	ADCSRA |= ((1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)); 
  9c:	80 81       	ld	r24, Z
  9e:	87 60       	ori	r24, 0x07	; 7
  a0:	80 83       	st	Z, r24
	
	/*About Setting ADLAR pin to zero to get the right alignment and 10 bit resolution.
	Right at the start ADLAR is most likely to be zero. But we can anyways set it
	to zero just to be sure
	*/
	ADCSRA &= ~(1<<ADLAR);
  a2:	80 81       	ld	r24, Z
  a4:	8f 7d       	andi	r24, 0xDF	; 223
  a6:	80 83       	st	Z, r24
	
	/*now we are going to enable the analog to digital interrupt, so that we can implement this in a free running
	manner.*/
	ADCSRA |= (1<<ADIE);
  a8:	80 81       	ld	r24, Z
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	80 83       	st	Z, r24
	
	//enabling global interrupt
	sei();
  ae:	78 94       	sei
  b0:	08 95       	ret

000000b2 <main>:

void configADC(void);

int main(void)
{
	configADC();
  b2:	0e 94 40 00 	call	0x80	; 0x80 <configADC>
	
	/*making all the pins of the port D into output mode*/
	DDRD |= 0xFF;
  b6:	8a b1       	in	r24, 0x0a	; 10
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a b9       	out	0x0a, r24	; 10
	
	/*gonna make the Port B pins 0 and 1 to output mode to use them for the remaining
	LEDS that will represent the two MSB which Port D wont have enough space to hold*/
	/*additionally going to also set the B5 pin to output mode so that it can be used to show that main program is
	running*/
	DDRB |= ((1<<PORTB0)|(1<<PORTB1)|(1<<PORTB5));
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	83 62       	ori	r24, 0x23	; 35
  c0:	84 b9       	out	0x04, r24	; 4
	/*additionally going to also set the B5 pin to output mode so that it can be used to show that main program is
	running*/
	//DDRB |= (1<<PORTB5);
    while (1) 
    {
		ADCSRA |= (1<<ADSC); // we start the A/D conversion
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
			//// loops until ADSC pin becomes zero
			////this will do Polling
		//}
		
		//next part is to blink the led connected to the B 5 pin
		PORTB |= (1<<PB5);
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	89 e6       	ldi	r24, 0x69	; 105
  d6:	98 e1       	ldi	r25, 0x18	; 24
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x26>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x30>
  e2:	00 00       	nop
		_delay_ms(500);
		PORTB &= ~(1<<PB5);
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	8f 7d       	andi	r24, 0xDF	; 223
  e8:	85 b9       	out	0x05, r24	; 5
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	89 e6       	ldi	r24, 0x69	; 105
  ee:	98 e1       	ldi	r25, 0x18	; 24
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x3e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x48>
  fa:	00 00       	nop
  fc:	e2 cf       	rjmp	.-60     	; 0xc2 <main+0x10>

000000fe <__vector_21>:
	//enabling global interrupt
	sei();
	
}

ISR (ADC_vect){
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
		PORTD = ADC; // ADC is the value of the ADC Output (value after conversion)
 110:	e8 e7       	ldi	r30, 0x78	; 120
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	91 81       	ldd	r25, Z+1	; 0x01
 118:	8b b9       	out	0x0b, r24	; 11
		PORTB |= ADC>>8; //trying this to get the remaining two bits to LEDs that will connect to pB0 and PB1
 11a:	80 81       	ld	r24, Z
 11c:	91 81       	ldd	r25, Z+1	; 0x01
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	89 2b       	or	r24, r25
 122:	85 b9       	out	0x05, r24	; 5
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
