
Lab3Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dcb  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c71  00000000  00000000  000010e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000426  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00002180  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f5  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010f  00000000  00000000  000027e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000028f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	58 d0       	rcall	.+176    	; 0x1a6 <main>
  f6:	8d c0       	rjmp	.+282    	; 0x212 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <initHardware>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

void initHardware(void){
	DDRA = 0B11111111; // setting all A pins to output
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	81 b9       	out	0x01, r24	; 1
	DDRC = 0B11111111; //setting all C pins to output
  fe:	87 b9       	out	0x07, r24	; 7
 100:	08 95       	ret

00000102 <initADC>:
	

}
void initADC(void){
	//AREF, External
	ADMUX &= ~((1<<REFS1)|(1<<REFS0));
 102:	ec e7       	ldi	r30, 0x7C	; 124
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 73       	andi	r24, 0x3F	; 63
 10a:	80 83       	st	Z, r24
	
	//enabling ADC
	ADCSRA |= (1<<ADEN);
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 68       	ori	r24, 0x80	; 128
 114:	80 83       	st	Z, r24
	
	//setting the prescaler to 128 to get optimal clock frequency for ADC
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
 116:	80 81       	ld	r24, Z
 118:	87 60       	ori	r24, 0x07	; 7
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <readADC>:
	//ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)|(1<<MUX3)|(1<<MUX4));
	//ADCSRB &= ~(1<<MUX5);
}

int readADC(uint8_t adc_channel){
	ADMUX |= (ADMUX & 0xF0)|adc_channel; //Input selection
 11e:	ec e7       	ldi	r30, 0x7C	; 124
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	90 81       	ld	r25, Z
 124:	20 81       	ld	r18, Z
 126:	90 7f       	andi	r25, 0xF0	; 240
 128:	89 2b       	or	r24, r25
 12a:	82 2b       	or	r24, r18
 12c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);// Start the ADC conversion
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 64       	ori	r24, 0x40	; 64
 136:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)){
 138:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 13c:	86 fd       	sbrc	r24, 6
 13e:	fc cf       	rjmp	.-8      	; 0x138 <readADC+0x1a>
	// loops until ADSC pin becomes zero
	//this will do Polling
	
	}
	
	return ADC;
 140:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 144:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
}
 148:	08 95       	ret

0000014a <display>:

void display(int valueOfADC){
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
	int ones;
	int tens;
	int hundreds;
	int thousands;
	
	thousands = (valueOfADC/1000)%10;
 150:	68 ee       	ldi	r22, 0xE8	; 232
 152:	73 e0       	ldi	r23, 0x03	; 3
 154:	37 d0       	rcall	.+110    	; 0x1c4 <__divmodhi4>
 156:	cb 01       	movw	r24, r22
 158:	2a e0       	ldi	r18, 0x0A	; 10
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	b9 01       	movw	r22, r18
 15e:	32 d0       	rcall	.+100    	; 0x1c4 <__divmodhi4>
 160:	fc 01       	movw	r30, r24
	hundreds = (valueOfADC/100)%10;
 162:	ce 01       	movw	r24, r28
 164:	64 e6       	ldi	r22, 0x64	; 100
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	2d d0       	rcall	.+90     	; 0x1c4 <__divmodhi4>
 16a:	cb 01       	movw	r24, r22
 16c:	b9 01       	movw	r22, r18
 16e:	2a d0       	rcall	.+84     	; 0x1c4 <__divmodhi4>
 170:	48 2f       	mov	r20, r24
	tens = (valueOfADC/10)%10;
 172:	ce 01       	movw	r24, r28
 174:	b9 01       	movw	r22, r18
 176:	26 d0       	rcall	.+76     	; 0x1c4 <__divmodhi4>
 178:	c8 2f       	mov	r28, r24
 17a:	cb 01       	movw	r24, r22
 17c:	b9 01       	movw	r22, r18
 17e:	22 d0       	rcall	.+68     	; 0x1c4 <__divmodhi4>
 180:	82 95       	swap	r24
	ones = (valueOfADC/1)%10;
	
	PORTA = ones | (tens<<4);
 182:	92 95       	swap	r25
 184:	90 7f       	andi	r25, 0xF0	; 240
 186:	98 27       	eor	r25, r24
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	98 27       	eor	r25, r24
 18c:	c8 2b       	or	r28, r24
 18e:	c2 b9       	out	0x02, r28	; 2
 190:	e2 95       	swap	r30
	PORTC = hundreds | (thousands<<4);
 192:	f2 95       	swap	r31
 194:	f0 7f       	andi	r31, 0xF0	; 240
 196:	fe 27       	eor	r31, r30
 198:	e0 7f       	andi	r30, 0xF0	; 240
 19a:	fe 27       	eor	r31, r30
 19c:	4e 2b       	or	r20, r30
 19e:	48 b9       	out	0x08, r20	; 8
 1a0:	df 91       	pop	r29
	
}
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <main>:
 1a6:	a9 df       	rcall	.-174    	; 0xfa <initHardware>
int main(void)
{
	int adcValue;
	// Initialize hardware and ADC
	initHardware();
	initADC();
 1a8:	ac df       	rcall	.-168    	; 0x102 <initADC>
	while (1)
	{
		// Read ADC value from channel 0
		adcValue = readADC(0);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	b8 df       	rcall	.-144    	; 0x11e <readADC>
		// Display the ADC value
		display(adcValue);
 1ae:	cd df       	rcall	.-102    	; 0x14a <display>
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	83 ed       	ldi	r24, 0xD3	; 211
 1b4:	90 e3       	ldi	r25, 0x30	; 48
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x10>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x1a>
 1c0:	00 00       	nop
 1c2:	f3 cf       	rjmp	.-26     	; 0x1aa <main+0x4>

000001c4 <__divmodhi4>:
 1c4:	97 fb       	bst	r25, 7
 1c6:	07 2e       	mov	r0, r23
 1c8:	16 f4       	brtc	.+4      	; 0x1ce <__divmodhi4+0xa>
 1ca:	00 94       	com	r0
 1cc:	06 d0       	rcall	.+12     	; 0x1da <__divmodhi4_neg1>
 1ce:	77 fd       	sbrc	r23, 7
 1d0:	08 d0       	rcall	.+16     	; 0x1e2 <__divmodhi4_neg2>
 1d2:	0b d0       	rcall	.+22     	; 0x1ea <__udivmodhi4>
 1d4:	07 fc       	sbrc	r0, 7
 1d6:	05 d0       	rcall	.+10     	; 0x1e2 <__divmodhi4_neg2>
 1d8:	3e f4       	brtc	.+14     	; 0x1e8 <__divmodhi4_exit>

000001da <__divmodhi4_neg1>:
 1da:	90 95       	com	r25
 1dc:	81 95       	neg	r24
 1de:	9f 4f       	sbci	r25, 0xFF	; 255
 1e0:	08 95       	ret

000001e2 <__divmodhi4_neg2>:
 1e2:	70 95       	com	r23
 1e4:	61 95       	neg	r22
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255

000001e8 <__divmodhi4_exit>:
 1e8:	08 95       	ret

000001ea <__udivmodhi4>:
 1ea:	aa 1b       	sub	r26, r26
 1ec:	bb 1b       	sub	r27, r27
 1ee:	51 e1       	ldi	r21, 0x11	; 17
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <__udivmodhi4_ep>

000001f2 <__udivmodhi4_loop>:
 1f2:	aa 1f       	adc	r26, r26
 1f4:	bb 1f       	adc	r27, r27
 1f6:	a6 17       	cp	r26, r22
 1f8:	b7 07       	cpc	r27, r23
 1fa:	10 f0       	brcs	.+4      	; 0x200 <__udivmodhi4_ep>
 1fc:	a6 1b       	sub	r26, r22
 1fe:	b7 0b       	sbc	r27, r23

00000200 <__udivmodhi4_ep>:
 200:	88 1f       	adc	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	5a 95       	dec	r21
 206:	a9 f7       	brne	.-22     	; 0x1f2 <__udivmodhi4_loop>
 208:	80 95       	com	r24
 20a:	90 95       	com	r25
 20c:	bc 01       	movw	r22, r24
 20e:	cd 01       	movw	r24, r26
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
