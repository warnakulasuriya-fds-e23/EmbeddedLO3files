
task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000014c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075a  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b0  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c0  00000000  00000000  0000107a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  0000133c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bf  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b9  00000000  00000000  00001767  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  8e:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <configureUART>:
#include <util/delay.h>
#include <stdbool.h>

void configureUART(void){
	//Setup BAUD Rate
	UBRR0L = UBRR_Value;
  96:	87 e6       	ldi	r24, 0x67	; 103
  98:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = (UBRR_Value>>8);
  9c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	//Asynchronous
	UCSR0A &= ~(1<<U2X0); 
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	80 83       	st	Z, r24
	//Enable Tx
	UCSR0B |= (1<<TXEN0);
  aa:	e1 ec       	ldi	r30, 0xC1	; 193
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	80 83       	st	Z, r24
	
	//set transmitting character bit size to 8 bit
	UCSR0B &= ~(1<<UCSZ02);
  b4:	80 81       	ld	r24, Z
  b6:	8b 7f       	andi	r24, 0xFB	; 251
  b8:	80 83       	st	Z, r24
	UCSR0C |=  ((1<<UCSZ00)|(1<<UCSZ01));
  ba:	e2 ec       	ldi	r30, 0xC2	; 194
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	86 60       	ori	r24, 0x06	; 6
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <checkIfTransmitBufferIsFree>:
	//No parity bits (values of the relevant registers are zero when starting)
	
}

bool checkIfTransmitBufferIsFree(){
	if(UCSR0A & (1<<UDRE0)){
  c6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ca:	85 ff       	sbrs	r24, 5
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <checkIfTransmitBufferIsFree+0xc>
		return true;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	08 95       	ret
	}
	return false;
  d2:	80 e0       	ldi	r24, 0x00	; 0
}
  d4:	08 95       	ret

000000d6 <transmit>:

void transmit(unsigned char inputChar){
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
	//check UDR0 (buffer) is free or not
	while(!checkIfTransmitBufferIsFree());
  da:	0e 94 63 00 	call	0xc6	; 0xc6 <checkIfTransmitBufferIsFree>
  de:	88 23       	and	r24, r24
  e0:	e1 f3       	breq	.-8      	; 0xda <transmit+0x4>
	
	if(checkIfTransmitBufferIsFree()){
  e2:	0e 94 63 00 	call	0xc6	; 0xc6 <checkIfTransmitBufferIsFree>
  e6:	81 11       	cpse	r24, r1
	//if UDR0 is free store input character into the UDR0
		UDR0 = inputChar;		
  e8:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}



}
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <main>:


int main(void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	27 97       	sbiw	r28, 0x07	; 7
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
	configureUART();
 104:	0e 94 4b 00 	call	0x96	; 0x96 <configureUART>
	DDRB |= (1<<PORTB5);
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	80 62       	ori	r24, 0x20	; 32
 10c:	84 b9       	out	0x04, r24	; 4
	char message[] = {'E','S','D','6','3','5','2'};
 10e:	87 e0       	ldi	r24, 0x07	; 7
 110:	e0 e0       	ldi	r30, 0x00	; 0
 112:	f1 e0       	ldi	r31, 0x01	; 1
 114:	de 01       	movw	r26, r28
 116:	11 96       	adiw	r26, 0x01	; 1
 118:	01 90       	ld	r0, Z+
 11a:	0d 92       	st	X+, r0
 11c:	8a 95       	dec	r24
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x28>
    /* Replace with your application code */
    while (1) 
    {
		PORTB = (1<<PORTB5);
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	85 b9       	out	0x05, r24	; 5
		for(int i=0; i<7;i++){
 124:	00 e0       	ldi	r16, 0x00	; 0
 126:	10 e0       	ldi	r17, 0x00	; 0
 128:	0b c0       	rjmp	.+22     	; 0x140 <main+0x50>
			transmit(message[i]);
 12a:	e1 e0       	ldi	r30, 0x01	; 1
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ec 0f       	add	r30, r28
 130:	fd 1f       	adc	r31, r29
 132:	e0 0f       	add	r30, r16
 134:	f1 1f       	adc	r31, r17
 136:	80 81       	ld	r24, Z
 138:	0e 94 6b 00 	call	0xd6	; 0xd6 <transmit>
	char message[] = {'E','S','D','6','3','5','2'};
    /* Replace with your application code */
    while (1) 
    {
		PORTB = (1<<PORTB5);
		for(int i=0; i<7;i++){
 13c:	0f 5f       	subi	r16, 0xFF	; 255
 13e:	1f 4f       	sbci	r17, 0xFF	; 255
 140:	07 30       	cpi	r16, 0x07	; 7
 142:	11 05       	cpc	r17, r1
 144:	94 f3       	brlt	.-28     	; 0x12a <main+0x3a>
 146:	ec cf       	rjmp	.-40     	; 0x120 <main+0x30>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
