
Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000775  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cd  00000000  00000000  00000965  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d0  00000000  00000000  00001032  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d0  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ConfigureUART>:


void ConfigureUART(void){
	
	// Setting the BAUD rate
	UBRR0L = UBRR_Value;
  80:	87 e6       	ldi	r24, 0x67	; 103
  82:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = (UBRR_Value>>8);
  86:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	
	//Enable transmitter
	UCSR0B |= (1<<TXEN0);
  8a:	e1 ec       	ldi	r30, 0xC1	; 193
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	88 60       	ori	r24, 0x08	; 8
  92:	80 83       	st	Z, r24
	
	//Enable Receiver
	UCSR0B |= (1<<RXEN0);
  94:	80 81       	ld	r24, Z
  96:	80 61       	ori	r24, 0x10	; 16
  98:	80 83       	st	Z, r24
	
	// set 8 bits as the transmit frame
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01);
  9a:	e2 ec       	ldi	r30, 0xC2	; 194
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	86 60       	ori	r24, 0x06	; 6
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

000000a6 <UARTTransmit>:

void UARTTransmit(unsigned char data){
	// Check transmit buffer free or not
	// if that is free write your data to transmit buffer
	//buffer register
	while(!(UCSR0A & (1<<UDRE0)));
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <UARTTransmit>
	UDR0 = data;
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  b2:	08 95       	ret

000000b4 <UARTReceiver>:
}

unsigned char UARTReceiver(){
	while(!(UCSR0A & (1<<RXC0)));
  b4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b8:	88 23       	and	r24, r24
  ba:	e4 f7       	brge	.-8      	; 0xb4 <UARTReceiver>
	return UDR0;
  bc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
}
  c0:	08 95       	ret

000000c2 <main>:

int main(void)
{
	ConfigureUART();
  c2:	0e 94 40 00 	call	0x80	; 0x80 <ConfigureUART>
	DDRB |= 0x20;  //or 0B00100000
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	80 62       	ori	r24, 0x20	; 32
  ca:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0x20;
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	85 b9       	out	0x05, r24	; 5
	
	while (1)
	{
		UARTTransmit(UARTReceiver());
  d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <UARTReceiver>
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <UARTTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	84 e3       	ldi	r24, 0x34	; 52
  de:	9c e0       	ldi	r25, 0x0C	; 12
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x1e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x28>
  ea:	00 00       	nop
  ec:	f2 cf       	rjmp	.-28     	; 0xd2 <main+0x10>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
